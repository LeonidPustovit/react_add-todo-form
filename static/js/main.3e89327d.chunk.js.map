{"version":3,"sources":["components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","api/users.ts","api/todos.ts","App.tsx","index.tsx"],"names":["UserInfo","user","className","href","email","name","TodoInfo","todo","id","classNames","completed","title","TodoList","todos","map","username","userId","App","useState","setTodos","selectedUser","setSelectedUser","newTodoTitle","setNewTodoTitle","isNewTodoError","setIsNewTodoError","useEffect","todosFromServer","usersFromServer","find","action","method","onSubmit","event","preventDefault","newTodo","Math","max","Number","prevTodo","addTodo","htmlFor","type","placeholder","value","onChange","target","disabled","selected","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3e89327d.chunk.js","sourcesContent":["import { User } from '../../Types';\n\ninterface Props {\n  user: User;\n}\n\nexport const UserInfo: React.FC<Props> = ({ user }) => {\n  return (\n    <a className=\"UserInfo\" href={`mailto:${user.email}`}>\n      {user.name}\n    </a>\n  );\n};\n","import classNames from 'classnames';\nimport { Todo } from '../../Types';\nimport { UserInfo } from '../UserInfo/UserInfo';\n\ninterface Props {\n  todo: Todo;\n}\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  return (\n    <article\n      data-id={`${todo.id}`}\n      className={classNames(\n        'TodoInfo',\n        { 'TodoInfo--completed': todo.completed },\n      )}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {todo.title}\n      </h2>\n\n      {todo.user && <UserInfo user={todo.user} />}\n    </article>\n  );\n};\n","import { Todo } from '../../Types';\nimport { TodoInfo } from '../TodoInfo/TodoInfo';\n\ninterface Props {\n  todos: Todo[];\n}\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map(todo => (\n        <TodoInfo todo={todo} key={todo.id} />\n      ))}\n    </section>\n  );\n};\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import { useEffect, useState } from 'react';\nimport './App.scss';\nimport { TodoList } from './components/TodoList/TodoList';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\nimport { Todo } from './Types';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [selectedUser, setSelectedUser] = useState('0');\n  const [newTodoTitle, setNewTodoTitle] = useState('');\n  const [isNewTodoError, setIsNewTodoError] = useState(false);\n\n  const getUser = (userId: number) => {\n    return usersFromServer.find(user => user.id === userId) || null;\n  };\n\n  const addTodo = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (selectedUser === '0' || newTodoTitle === '') {\n      setIsNewTodoError(true);\n\n      return;\n    }\n\n    const maxID = Math.max(...todos.map(todo => Number(todo.id)));\n    const newTodo = {\n      id: maxID + 1,\n      title: newTodoTitle,\n      completed: false,\n      userId: +selectedUser,\n      user: usersFromServer.find(user => user.id === +selectedUser) || null,\n    };\n\n    setTodos(prevTodo => [...prevTodo, newTodo]);\n    setSelectedUser('0');\n    setNewTodoTitle('');\n    setIsNewTodoError(false);\n  };\n\n  useEffect(() => {\n    setTodos(todosFromServer.map(todo => ({\n      ...todo,\n      user: getUser(todo.userId),\n    })));\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/users\"\n        method=\"POST\"\n        onSubmit={(event) => addTodo(event)}\n      >\n        <div className=\"field\">\n          <label htmlFor=\"titleInput\">\n            Title:\n            <input\n              type=\"text\"\n              id=\"titleInput\"\n              data-cy=\"titleInput\"\n              placeholder=\"Please enter a title\"\n              value={newTodoTitle}\n              onChange={((event) => setNewTodoTitle(event.target.value))}\n              // required\n            />\n          </label>\n          {newTodoTitle === ''\n            && isNewTodoError\n            && <span className=\"error\">Please enter a title</span>}\n        </div>\n\n        <div className=\"field\">\n          <label htmlFor=\"userSelect\">\n            User:\n            <select\n              data-cy=\"userSelect\"\n              id=\"userSelect\"\n              value={selectedUser}\n              onChange={(event) => setSelectedUser(event.target.value)}\n            >\n              <option\n                value=\"0\"\n                disabled\n                selected\n              >\n                Choose a user\n              </option>\n              {usersFromServer.map(user => (\n                <option\n                  value={user.id}\n                  key={user.id}\n                >\n                  {user.name}\n                </option>\n              ))}\n            </select>\n          </label>\n          {selectedUser === '0'\n            && isNewTodoError\n            && <span className=\"error\">Please choose a user</span>}\n        </div>\n\n        <button\n          type=\"submit\"\n          data-cy=\"submitButton\"\n        >\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}